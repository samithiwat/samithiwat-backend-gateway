// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Samithiwat",
            "url": "https://samithiwat.dev",
            "email": "admin@samithiwat.dev"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/change-password": {
            "post": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the true if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "ChangePassword of user account",
                "parameters": [
                    {
                        "description": "change password dto",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.ChangePassword"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "401": {
                        "description": "Invalid access token",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "403": {
                        "description": "Insufficiency permission",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Return the credentials if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user account",
                "parameters": [
                    {
                        "description": "login dto",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Login"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/proto.Credential"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "401": {
                        "description": "Invalid email or username",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "get": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the user dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user from service",
                "responses": {
                    "204": {
                        "description": ""
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the user dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Check user status and user info",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/proto.User"
                        }
                    },
                    "401": {
                        "description": "Invalid token",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Return the user dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register user account",
                "parameters": [
                    {
                        "description": "register dto",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.Register"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/proto.User"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "422": {
                        "description": "Email is already existed",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            }
        },
        "/auth/token": {
            "post": {
                "description": "Return the credentials if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Redeem new token",
                "parameters": [
                    {
                        "description": "refresh token dto",
                        "name": "register",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RedeemNewToken"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/proto.Credential"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "401": {
                        "description": "Invalid refresh token",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            }
        },
        "/organization": {
            "get": {
                "description": "Return the arrays of organization dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Get all organizations",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proto.Organization"
                        }
                    },
                    "400": {
                        "description": "Invalid query param",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the organization dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Create the organization",
                "parameters": [
                    {
                        "description": "organization dto",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OrganizationDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/proto.Organization"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "404": {
                        "description": "Not found organization",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            }
        },
        "/organization/{id}": {
            "get": {
                "description": "Return the organization dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Get specific organization with id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proto.Organization"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "404": {
                        "description": "Not found organization",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the organization dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Delete the organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proto.Organization"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "404": {
                        "description": "Not found organization",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the organization dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organization"
                ],
                "summary": "Update the existing organization",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "organization dto",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.OrganizationDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proto.Organization"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "404": {
                        "description": "Not found organization",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            }
        },
        "/team": {
            "get": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the arrays of team dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Get all teams",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proto.Team"
                        }
                    },
                    "400": {
                        "description": "Invalid query param",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the team dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Create the team",
                "parameters": [
                    {
                        "description": "team dto",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TeamDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/proto.Team"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "404": {
                        "description": "Not found team",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            }
        },
        "/team/{id}": {
            "get": {
                "description": "Return the team dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Get specific team with id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proto.Team"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "404": {
                        "description": "Not found team",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the team dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Delete the team",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proto.Team"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "404": {
                        "description": "Not found team",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the team dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "team"
                ],
                "summary": "Update the existing team",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "team dto",
                        "name": "team",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.TeamDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proto.Team"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "404": {
                        "description": "Not found team",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service is down",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the arrays of user dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proto.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the user dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Create the user",
                "parameters": [
                    {
                        "description": "User DTO",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/proto.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "Return the user dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get specific user with id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proto.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "404": {
                        "description": "Not found user",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the user dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete the user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proto.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "AuthToken": []
                    }
                ],
                "description": "Return the user dto if successfully",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update the existing user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "user dto",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UserDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/proto.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseErr"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ChangePassword": {
            "type": "object",
            "required": [
                "old_password"
            ],
            "properties": {
                "new_password": {
                    "type": "string",
                    "example": "new_password"
                },
                "old_password": {
                    "type": "string",
                    "example": "password"
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.Login": {
            "type": "object",
            "required": [
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "admin@samithiwat.dev"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        },
        "dto.OrganizationDto": {
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.RedeemNewToken": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "dto.Register": {
            "type": "object",
            "required": [
                "display_name",
                "firstname",
                "lastname"
            ],
            "properties": {
                "display_name": {
                    "type": "string",
                    "example": "Smithy"
                },
                "email": {
                    "type": "string",
                    "example": "admin@samithiwat.dev"
                },
                "firstname": {
                    "type": "string",
                    "example": "Samithiwat"
                },
                "image_url": {
                    "type": "string",
                    "example": "https://storage.googleapis.com/samithiwat-bucket/about-me-protrait.png"
                },
                "lastname": {
                    "type": "string",
                    "example": "Boonchai"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        },
        "dto.ResponseErr": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "dto.TeamDto": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "dto.UserDto": {
            "type": "object",
            "required": [
                "display_name",
                "firstname",
                "lastname"
            ],
            "properties": {
                "display_name": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                }
            }
        },
        "proto.Contact": {
            "type": "object",
            "properties": {
                "facebook": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "instagram": {
                    "type": "string"
                },
                "linkedin": {
                    "type": "string"
                },
                "twitter": {
                    "type": "string"
                }
            }
        },
        "proto.Credential": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string"
                },
                "expiresIn": {
                    "type": "integer"
                },
                "refreshToken": {
                    "type": "string"
                }
            }
        },
        "proto.Location": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "province": {
                    "type": "string"
                },
                "zipcode": {
                    "type": "string"
                }
            }
        },
        "proto.Log": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/proto.User"
                }
            }
        },
        "proto.Organization": {
            "type": "object",
            "properties": {
                "contact": {
                    "$ref": "#/definitions/proto.Contact"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "$ref": "#/definitions/proto.Location"
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.Log"
                    }
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.User"
                    }
                },
                "name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.Role"
                    }
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.Team"
                    }
                }
            }
        },
        "proto.Permission": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.Role"
                    }
                }
            }
        },
        "proto.Role": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.Permission"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.User"
                    }
                }
            }
        },
        "proto.Team": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.Log"
                    }
                },
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.User"
                    }
                },
                "name": {
                    "type": "string"
                },
                "organization": {
                    "$ref": "#/definitions/proto.Organization"
                },
                "subTeams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.Team"
                    }
                }
            }
        },
        "proto.User": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/proto.Location"
                },
                "contact": {
                    "$ref": "#/definitions/proto.Contact"
                },
                "displayName": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "imageUrl": {
                    "type": "string"
                },
                "lastname": {
                    "type": "string"
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.Log"
                    }
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.Organization"
                    }
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/proto.Team"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "AuthToken": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "tags": [
        {
            "description": "# Auth Tag API Documentation\r\n**Auth** functions goes here",
            "name": "auth"
        },
        {
            "description": "# User Tag API Documentation\r\n**User** functions goes here",
            "name": "user"
        },
        {
            "description": "# Organization Tag API Documentation\r\n**Organization** functions goes here",
            "name": "organization"
        },
        {
            "description": "# Team Tag API Documentation\r\n**Team** functions goes here",
            "name": "team"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{"https", "http"},
	Title:            "Samithiwat Backend",
	Description:      "# Samithiwat's API\r\nThis is the documentation for https://samithiwat.dev",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
